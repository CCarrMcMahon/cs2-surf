import pathlib
from pathlib import Path
from ambuild2.frontend.v2_2.context import BuildContext
from ambuild2.frontend.v2_2.cpp.compiler import CliCompiler


class MetamodSourcePlugin:
    """A class with variables and functions related to the plugin."""
    context: BuildContext
    name: str
    alias: str
    debug: bool
    optimize: bool
    compiler: CliCompiler

    def __init__(self, context: BuildContext) -> None:
        self.context = context
        self.__parse_context_options()
        self.set_compiler()

    def __parse_context_options(self) -> None:
        """A private helper method to parse custom plugin arguments."""
        name: str = self.context.options.plugin_name
        alias: str = self.context.options.plugin_alias
        debug: bool = self.context.options.debug
        optimize: bool = self.context.options.optimize

        name = name.strip()
        alias = alias.strip()

        if name == "":
            raise ValueError("The name of the plugin can't be empty.")

        self.name = name
        self.alias = alias
        self.debug = debug
        self.optimize = optimize

    def set_compiler(self, platform="", arch="", abi="") -> None:
        """A method to set the compiler that will be used for the plugin.

        Currently, only Windows x86_64 MSVC is supported.
        """
        platform = platform.lower().strip()
        arch = arch.lower().strip()
        abi = abi.lower().strip()
        args = [platform, arch, abi]

        compiler: CliCompiler = None
        if all((s == "") for s in args):
            compiler = self.context.DetectCxx()
        else:
            target = "-".join([s for s in args if s != ""])
            compiler = self.context.DetectCxx(target=target)

        if compiler.target.platform != "windows":
            raise SystemExit("This plugin currently only supports being built on Windows.")

        if compiler.target.arch != "x86_64":
            raise SystemExit("This plugin currently only supports being built on x86_64.")

        if compiler.vendor.name != "msvc":
            raise SystemExit("This plugin currently only supports being built with MSVC.")

        self.compiler = compiler

plugin = MetamodSourcePlugin(builder)
